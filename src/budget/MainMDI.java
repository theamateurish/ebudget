/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainMDI.java
 *
 * Created on Oct 5, 2010, 4:15:05 PM
 */

package budget;

import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.beans.PropertyVetoException;
import java.net.URL;
import javax.swing.*;
import mdiMenu.WindowMenu;

/**
 *
 * @author Owner
 */
public class MainMDI extends javax.swing.JFrame {
    
    private transaction.appropriation.FrmPrepAppropriation appropriation;
    private transaction.appropriation.FrmAppropApproval approp_approv;
    private transaction.appropriation.FrmAppropCancellation approp_cancel;
    private transaction.allotment.FrmPrepAllotment allotment;
    private transaction.allotment.FrmApprovalAllotment allot_approv;
    private transaction.allotment.FrmAllotCancellation allot_cancel;
    /** Creates new form MainMDI */
    public MainMDI() {
        initComponents();
        desktopPane.setBackgroundImage(getClass().getResource("/images/sc.png"),false);      
        setExtendedState(getExtendedState() | javax.swing.JFrame.MAXIMIZED_BOTH); 
        System.setProperty("systemYear", org.joda.time.format.DateTimeFormat.forPattern("yyyy").print(new org.joda.time.LocalDate(new connect.SystemOptions().ServerDate())));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        desktopPane = new mdiMenu.MDIDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuTransact = new javax.swing.JMenu();
        mnuApprop = new javax.swing.JMenu();
        mnuCurrentApprop = new javax.swing.JMenu();
        mnuPrepareApprop = new javax.swing.JMenuItem();
        mnuApproval = new javax.swing.JMenuItem();
        mnuAppropCancel = new javax.swing.JMenuItem();
        mnuAllotment = new javax.swing.JMenu();
        mnuPrepAllotment = new javax.swing.JMenuItem();
        mnuApprovAllotment = new javax.swing.JMenuItem();
        mnuAllotCancel = new javax.swing.JMenuItem();
        mnuWindow = new javax.swing.JMenu("Window");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        desktopPane.setOpaque(false);
        scrollPane.setViewportView(desktopPane);

        jMenuBar1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        mnuTransact.setText("Transaction");
        mnuTransact.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        mnuApprop.setText("Appropriations");
        mnuApprop.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        mnuCurrentApprop.setText("Current Appropriations");
        mnuCurrentApprop.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        mnuPrepareApprop.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mnuPrepareApprop.setText("Preparation");
        mnuPrepareApprop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPrepareAppropActionPerformed(evt);
            }
        });
        mnuCurrentApprop.add(mnuPrepareApprop);

        mnuApproval.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mnuApproval.setText("Approval");
        mnuApproval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuApprovalActionPerformed(evt);
            }
        });
        mnuCurrentApprop.add(mnuApproval);

        mnuAppropCancel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mnuAppropCancel.setText("Cancellation");
        mnuAppropCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAppropCancelActionPerformed(evt);
            }
        });
        mnuCurrentApprop.add(mnuAppropCancel);

        mnuApprop.add(mnuCurrentApprop);

        mnuTransact.add(mnuApprop);

        mnuAllotment.setText("Advice of Allotment");
        mnuAllotment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        mnuPrepAllotment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mnuPrepAllotment.setText("Preparation");
        mnuPrepAllotment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPrepAllotmentActionPerformed(evt);
            }
        });
        mnuAllotment.add(mnuPrepAllotment);

        mnuApprovAllotment.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mnuApprovAllotment.setText("Approval");
        mnuApprovAllotment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuApprovAllotmentActionPerformed(evt);
            }
        });
        mnuAllotment.add(mnuApprovAllotment);

        mnuAllotCancel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        mnuAllotCancel.setText("Cancellation");
        mnuAllotCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAllotCancelActionPerformed(evt);
            }
        });
        mnuAllotment.add(mnuAllotCancel);

        mnuTransact.add(mnuAllotment);

        jMenuBar1.add(mnuTransact);

        mnuWindow.setText("Window");
        mnuWindow.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jMenuBar1.add(mnuWindow);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1110)/2, (screenSize.height-851)/2, 1110, 851);
    }// </editor-fold>//GEN-END:initComponents

   

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
     
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void mnuPrepareAppropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPrepareAppropActionPerformed
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            appropriation = (transaction.appropriation.FrmPrepAppropriation) desktopPane.PackUpFrame(appropriation, transaction.appropriation.FrmPrepAppropriation.class.getName());
            appropriation.setMaximum(false);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_mnuPrepareAppropActionPerformed

    private void mnuApprovalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuApprovalActionPerformed
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            approp_approv = (transaction.appropriation.FrmAppropApproval) desktopPane.PackUpFrame(approp_approv, transaction.appropriation.FrmAppropApproval.class.getName());
            approp_approv.setMaximum(false);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_mnuApprovalActionPerformed

    
    private void mnuPrepAllotmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPrepAllotmentActionPerformed
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            allotment= (transaction.allotment.FrmPrepAllotment) desktopPane.PackUpFrame(allotment, transaction.allotment.FrmPrepAllotment.class.getName());
            allotment.setMaximum(false);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_mnuPrepAllotmentActionPerformed

    private void mnuApprovAllotmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuApprovAllotmentActionPerformed
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            allot_approv = (transaction.allotment.FrmApprovalAllotment) desktopPane.PackUpFrame(allot_approv, transaction.allotment.FrmApprovalAllotment.class.getName());
            allot_approv.setMaximum(false);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_mnuApprovAllotmentActionPerformed

    private void mnuAppropCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAppropCancelActionPerformed
                                                  
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            approp_cancel= (transaction.appropriation.FrmAppropCancellation) desktopPane.PackUpFrame(approp_cancel, transaction.appropriation.FrmAppropCancellation.class.getName());
            approp_cancel.setMaximum(false);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));     
    }//GEN-LAST:event_mnuAppropCancelActionPerformed

    private void mnuAllotCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAllotCancelActionPerformed
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        try {
            allot_cancel= (transaction.allotment.FrmAllotCancellation) desktopPane.PackUpFrame(allot_cancel, transaction.allotment.FrmAllotCancellation.class.getName());
            allot_cancel.setMaximum(false);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(MainMDI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR)); 
    }//GEN-LAST:event_mnuAllotCancelActionPerformed
    
    
    public static void main(String args[]) {
        if (connect.DBConnection.main(args))
            System.exit(0);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMDI().setVisible(true);
            }
        });
    }

    /**
    * @param args the command line arguments
    */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private mdiMenu.MDIDesktopPane desktopPane;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem mnuAllotCancel;
    private javax.swing.JMenu mnuAllotment;
    private javax.swing.JMenu mnuApprop;
    private javax.swing.JMenuItem mnuAppropCancel;
    private javax.swing.JMenuItem mnuApprovAllotment;
    private javax.swing.JMenuItem mnuApproval;
    private javax.swing.JMenu mnuCurrentApprop;
    private javax.swing.JMenuItem mnuPrepAllotment;
    private javax.swing.JMenuItem mnuPrepareApprop;
    private javax.swing.JMenu mnuTransact;
    public static javax.swing.JMenu mnuWindow;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    protected static Image createImage(String path, String description) {
        URL imageURL = MainMDI.class.getResource(path);

        if (imageURL == null) {
            System.err.println("Resource not found: " + path);
            return null;
        } else {
            return (new ImageIcon(imageURL, description)).getImage();
        }
    }


}
