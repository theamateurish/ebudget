package budget;

/*
CREATE TABLE testusers(username varchar(100) PRIMARY KEY, cryptpwd text, md5pwd text);
INSERT INTO testusers(username, cryptpwd, md5pwd) 
    VALUES ('robby', crypt('test', gen_salt('md5')), md5('test')),
        ('artoo', crypt('test',gen_salt('md5')), md5('test'));
        
SELECT username, cryptpwd, md5pwd
    FROM testusers;
    
 username |              cryptpwd              |              md5pwd

----------+------------------------------------+---------------------------------
 robby   | $1$IOchfG/z$bZW1pRFA3wuvn6pAuD.Du/ | 098f6bcd4621d373cade4e832627b4f6
 artoo   | $1$84oZTXI/$yZ6wV5jhJo6aQYrTciMQR/ | 098f6bcd4621d373cade4e832627b4f6
Observe that both users have chosen the same password test. The md5 version is the same for both, but the crypted password is different although they are the same password. When any log in, we do this test.


 
 -- successful login
 SELECT username 
    FROM testusers 
    WHERE username = 'robby' AND cryptpwd = crypt('test', cryptpwd);
-- successful login     
 SELECT username 
    FROM testusers 
    WHERE username = 'artoo' AND cryptpwd = crypt('test', cryptpwd);
    
-- unsuccessful login
 SELECT username 
    FROM testusers 
    WHERE username = 'artoo' AND cryptpwd = crypt('artoo', cryptpwd);
    
-- using md5
SELECT username
    FROM testusers
    WHERE username = 'robby' and md5pwd = md5('test');
*/
/**
 *
 * @author felix
 */
public class LoginDialog extends javax.swing.JDialog {


    /**
     * Creates new form LoginDialog
     */
    //    public LoginDialog(java.awt.Frame parent, boolean modal) {
    //        super(parent, modal);
    //        initComponents();
    //
    //        // Close the dialog when Esc is pressed
    //        String cancelName = "cancel";
    //        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    //        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
    //        ActionMap actionMap = getRootPane().getActionMap();
    //        actionMap.put(cancelName, new AbstractAction() {
    //            @Override
    //            public void actionPerformed(ActionEvent e) {
    //                doClose(RET_CANCEL);
    //            }
    //        });
    //    }
    public LoginDialog() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAccept = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        txtUserID = new javax.swing.JTextField();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        txtSecret = new javax.swing.JPasswordField();
        txtMsg = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/imahen/key.png")).getImage());
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnAccept.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnAccept.setText("Verify");
        btnAccept.setBorderPainted(false);
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnCancel.setText("Abort");
        btnCancel.setBorderPainted(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("USER ID");

        txtUserID.setDocument(new dbase.dcare.FixedSizePlainDocument(15));
        txtUserID.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("PASSWORD");

        txtMsg.setEditable(false);
        txtMsg.setBackground(new java.awt.Color(238, 238, 238));
        txtMsg.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(37, 37, 37)
                        .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(12, 12, 12)
                        .addComponent(txtSecret, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAccept)
                        .addGap(128, 128, 128)
                        .addComponent(btnCancel))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel1))
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2))
                    .addComponent(txtSecret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAccept)
                    .addComponent(btnCancel)))
        );

        getRootPane().setDefaultButton(btnAccept);

        setSize(new java.awt.Dimension(298, 225));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        try (java.sql.Connection jdbc = new DBaseLink();
                java.sql.Statement smt = jdbc.createStatement();
            java.sql.ResultSet rst = smt.executeQuery(
                    "SELECT " +
                        "NOW()::TIMESTAMP WITHOUT TIME ZONE, " +
                        "NOW()::DATE, " +
                        "user_name " +
                    "FROM " +
                        "buds.userlogon " +
                    "WHERE " +
                        "(userid = '" + txtUserID.getText() + "') AND " +
                        "(passwrd = crypt('" + String.valueOf(txtSecret.getPassword()) + "', passwrd))")) {
            //UPDATE buds.userlogon SET passwrd = crypt('', gen_salt('md5')) WHERE userid = ''
            if (rst.next()) {
                System.setProperty("USERID", txtUserID.getText());
                System.setProperty("KARONG", String.valueOf(rst.getTimestamp(1).getTime()));
                System.setProperty("PETSAH",  rst.getString(2));
                System.setProperty("USERNAME",  rst.getString(3));
                System.setProperty("systemYear",  "2016");
                jdbc.prepareStatement("UPDATE bud.userlogon SET log_ins = NOW()::TIMESTAMP WITHOUT TIME ZONE WHERE (userid = '" + txtUserID.getText() + "') AND \"(passwrd = MD5('" + String.valueOf(txtSecret.getPassword()) + "'))");
                mVerified = true;
            } else {
                mVerified = false;
                txtMsg.setText("Invalid User/Password. Try again");
            }
            //rst.close();

            if (mVerified) {
                //boolean vacuum = false; String petsa = "";
                smt.executeUpdate("UPDATE buds.userlogon SET log_ins = NOW() WHERE (userid = '" + txtUserID.getText() + "')");
                /*try (java.sql.ResultSet tbl = smt.executeQuery("SELECT vacuumed = NOW()::DATE, NOW()::DATE FROM public.parameter")) {
                    if (tbl.next()) {
                        vacuum = tbl.getBoolean(1);
                        petsa  = new java.text.SimpleDateFormat("MM/dd/yyyy").format(tbl.getDate(2));
                    }
                }*

                if (!vacuum) {
                    txtMsg.setText("Vacuum date: " + petsa);
                    smt.execute("VACUUM FULL VERBOSE ANALYZE;");
                    smt.executeUpdate("UPDATE public.parameter SET vacuumed = NOW()::DATE ");
                }*/

                dispatchEvent(new java.awt.event.WindowEvent(this, java.awt.event.WindowEvent.WINDOW_CLOSING));
            }

            
            
        } catch (Exception ex) {
            txtMsg.setText(ex.getMessage());
            java.util.logging.Logger.getLogger(LoginDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } finally {

        }
    }//GEN-LAST:event_btnAcceptActionPerformed
    
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispatchEvent(new java.awt.event.WindowEvent(this, java.awt.event.WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_btnCancelActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (mVerified)
            dispose();
        else
            System.exit(0);
    }//GEN-LAST:event_formWindowClosing


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCancel;
    private javax.swing.JTextPane txtMsg;
    private javax.swing.JPasswordField txtSecret;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables

    private boolean mVerified;
}
