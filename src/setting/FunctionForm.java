package setting;

/**
 *
 * @author felix
 */
public class FunctionForm extends javax.swing.JInternalFrame {

//    private final java.util.List<Centres> aCenters = new java.util.ArrayList();
    private final java.util.List<Short> aFunds    = new java.util.ArrayList();
    private final java.util.List<Short> aServices = new java.util.ArrayList();
    private final java.util.List<Short> aOffices  = new java.util.ArrayList();
    private final java.util.List<Short> aSubOffc  = new java.util.ArrayList();
    private final java.util.List<Boolean[]> CanEdit = new java.util.ArrayList();
    private final java.util.List<Boolean> Altered = new java.util.ArrayList();

    /**
     * Creates new form NewJFrame
     */
    public FunctionForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deftListModel = new javax.swing.DefaultListModel();
        pnlSub = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnCloseB = new javax.swing.JButton();
        javax.swing.JSplitPane SplitPane = new javax.swing.JSplitPane();
        javax.swing.JScrollPane ScrollPane1 = new javax.swing.JScrollPane();
        Lista = new javax.swing.JList();
        javax.swing.JScrollPane ScrollPane2 = new javax.swing.JScrollPane();
        InternalFrame = new javax.swing.JInternalFrame();
        javax.swing.JScrollPane jScrollPane2 = new javax.swing.JScrollPane();
        tblFunds = new javax.swing.JTable();
        pnlMain = new javax.swing.JPanel();
        btnAddRow = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnErase = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnPreview = new javax.swing.JButton();
        btnCloseA = new javax.swing.JButton();

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/save.png"))); // NOI18N
        btnSave.setText("Save/Alter");
        btnSave.setBorderPainted(false);
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/cancel.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setBorderPainted(false);
        btnCancel.setFocusable(false);
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnCancel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnCloseB.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/close.png"))); // NOI18N
        btnCloseB.setText("Close");
        btnCloseB.setBorderPainted(false);
        btnCloseB.setFocusable(false);
        btnCloseB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCloseB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnCloseB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCloseB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSubLayout = new javax.swing.GroupLayout(pnlSub);
        pnlSub.setLayout(pnlSubLayout);
        pnlSubLayout.setHorizontalGroup(
            pnlSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSubLayout.createSequentialGroup()
                .addComponent(btnSave)
                .addGap(18, 18, 18)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 136, Short.MAX_VALUE)
                .addComponent(btnCloseB, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlSubLayout.setVerticalGroup(
            pnlSubLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
            .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCloseB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setClosable(true);
        setIconifiable(true);
        setTitle("Function/Service/Project");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        SplitPane.setDividerLocation(300);
        SplitPane.setContinuousLayout(true);

        ScrollPane1.setMinimumSize(new java.awt.Dimension(300, 22));

        Lista.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        Lista.setModel(deftListModel);
        Lista.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ScrollPane1.setViewportView(Lista);

        SplitPane.setLeftComponent(ScrollPane1);

        ScrollPane2.setMinimumSize(new java.awt.Dimension(590, 22));

        InternalFrame.setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/setup2.png"))); // NOI18N
        InternalFrame.setVisible(true);
        InternalFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblFunds.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Description", "key_uid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            /*boolean[] canEdit = new boolean [] {
                false, true, false
            };*/

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                /*if (FLAG.equals("OFFICES"))
                return true;
                else*/
                return CanEdit.get(rowIndex)[columnIndex];
            }
        });
        tblFunds.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(tblFunds);
        if (tblFunds.getColumnModel().getColumnCount() > 0) {
            tblFunds.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblFunds.getColumnModel().getColumn(1).setPreferredWidth(400);
            tblFunds.getColumnModel().getColumn(2).setMinWidth(0);
            tblFunds.getColumnModel().getColumn(2).setPreferredWidth(0);
            tblFunds.getColumnModel().getColumn(2).setMaxWidth(0);
        }

        InternalFrame.getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 550, 369));

        pnlMain.setLayout(new java.awt.GridLayout(1, 6, 20, 0));

        btnAddRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/add_row.gif"))); // NOI18N
        btnAddRow.setText("Add Row");
        btnAddRow.setBorderPainted(false);
        btnAddRow.setFocusable(false);
        btnAddRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddRow.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnAddRow.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRowActionPerformed(evt);
            }
        });
        pnlMain.add(btnAddRow);

        btnModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/modify.png"))); // NOI18N
        btnModify.setText("Modify");
        btnModify.setBorderPainted(false);
        btnModify.setFocusable(false);
        btnModify.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnModify.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnModify.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });
        pnlMain.add(btnModify);

        btnErase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/eraser.png"))); // NOI18N
        btnErase.setText("Erase");
        btnErase.setBorderPainted(false);
        btnErase.setFocusable(false);
        btnErase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnErase.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnErase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnErase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEraseActionPerformed(evt);
            }
        });
        pnlMain.add(btnErase);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/search.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setBorderPainted(false);
        btnSearch.setFocusable(false);
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSearch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        pnlMain.add(btnSearch);

        btnPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/preview.png"))); // NOI18N
        btnPreview.setText("Preview");
        btnPreview.setBorderPainted(false);
        btnPreview.setFocusable(false);
        btnPreview.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPreview.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnPreview.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewActionPerformed(evt);
            }
        });
        pnlMain.add(btnPreview);

        btnCloseA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/close.png"))); // NOI18N
        btnCloseA.setText("Close");
        btnCloseA.setBorderPainted(false);
        btnCloseA.setFocusable(false);
        btnCloseA.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCloseA.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnCloseA.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCloseA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });
        pnlMain.add(btnCloseA);

        InternalFrame.getContentPane().add(pnlMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 400, 550, 50));

        ScrollPane2.setViewportView(InternalFrame);

        SplitPane.setRightComponent(ScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(SplitPane)
        );

        setBounds(0, 0, 1081, 538);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        // test = new org.jdesktop.swingx.treetable.FileSystemModel();
/*
dbc = new connect.DBConnection();
                preparedStatement = dbc.prepareStatement("select * from buds.test_fpp ORDER BY ppa_level,codes");
                ResultSet rs = preparedStatement.executeQuery();
                int ctrow = 0;
                while(rs.next()){
                    ctrow=rs.getRow();
                }
                rs.close();

                Object[][] table = new Object[ctrow][3];

                int row = 0;
                ResultSet rs1 = preparedStatement.executeQuery();
                while (rs1.next()) {
                    table[row][0] = rs1.getInt("ppa_uid");
                    table[row][1] = rs1.getInt("parent_id");
                    table[row][2] = rs1.getString("ppa_codes").trim() + (rs1.getInt("ppa_level")==0?"":"~") + rs1.getString("description");
                    row++;
                }
                rs1.close();
                preparedStatement.close();

                //Create as many nodes as there are rows of data.
                DefaultMutableTreeNode[] node = new DefaultMutableTreeNode[table.length];
                for (int i = 0; i < table.length; i++) {
                    node[i] = new DefaultMutableTreeNode(table[i][2].toString());
                    node[0]=new DefaultMutableTreeNode("");
                }

                rootNode =node[0];   //Set the root node

                //Cycle through the table above and assign nodes to nodes
                for (int i = 0; i < table.length; i++) {
                    for (int j = 1; j < table.length; j++) {
                        if (table[i][0].toString() .equals(table[j][1].toString())) {
                            node[i].add(node[j]);
                        }
                    }
                }
                
                //Creating the tree model. setting the root node.
                treeModel = new DefaultTreeModel(rootNode);
                treeFPP.setModel(treeModel);
*/
        Lista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent lse) {
                int indices = ((javax.swing.JList) lse.getSource()).getSelectedIndex();
                if (indices < 0) return;

                if (!lse.getValueIsAdjusting()) {
                    if(aServices.get(indices) == 0 & aOffices.get(indices) == 0 & aSubOffc.get(indices) == 0)
                        showSerbesyo(indices);
                    else if(aServices.get(indices) != 0 & aOffices.get(indices) == 0 & aSubOffc.get(indices) == 0)
                        showOpesina(indices);
                    else if(aServices.get(indices) != 0 & aOffices.get(indices) != 0 & aSubOffc.get(indices) == 0)
                        showSubOffc(indices);
                    //else if(aServices.get(indices) != 0 & aOffices.get(indices) != 0 & aSubOffc.get(indices) == 0)
                    //    if (!showSubOffc(indices)) showProyekto(indices);
                    else
                        showProyekto(indices);
                }
                btnCancel.setEnabled(true);
                btnAddRow.setEnabled(true);
                btnModify.setEnabled(tblFunds.getSelectedRowCount() > 0);
                btnSearch.setEnabled(tblFunds.getRowCount() > 0);

                pnlSub .setVisible(false);
                pnlMain.setVisible(true);            
            }
        });
        tblFunds.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent lse) {
                btnModify.setEnabled(!lse.getValueIsAdjusting());
                btnErase .setEnabled(!lse.getValueIsAdjusting());
            }
        });
        deftListModel.addListDataListener(listDataListener);
        tblFunds.getModel().addTableModelListener(new MyTableModelListener());
        InternalFrame.getContentPane().add(pnlSub, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 400, 550, 50));
        pnlSub.setVisible(false);
        
        btnSave  .setEnabled(false);
        btnCancel.setEnabled(false);
        btnErase .setEnabled(false);
        btnAddRow.setEnabled(false);
        btnModify.setEnabled(false);
        btnSearch.setEnabled(false);
        

        reLoad();
    }//GEN-LAST:event_formInternalFrameOpened

    private void reLoad() {
        String sqlCommand = 
                "SELECT " +
                    "funds_id, " +
                    "services, " +
                    "resp_id, " +
                    "resp_sub, " +
                    "programs, " +
                    "description " +
                "FROM " +
                    "buds.fund_control " +
                "WHERE " +
                    "(programs = 0) " +
                "ORDER BY " +
                    "funds_id, services, resp_id, resp_sub, programs";
        try (java.sql.Connection jdbc = new budget.DBaseLink();
                java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
                java.sql.ResultSet rst = stmt.executeQuery(sqlCommand)) {
            deftListModel.clear(); aFunds.clear(); aServices.clear(); aOffices.clear(); aSubOffc.clear();
            while(rst.next()) {
                aFunds.add(rst.getShort(1)); aServices.add(rst.getShort(2)); aOffices.add(rst.getShort(3)); aSubOffc.add(rst.getShort(4));
                int length = (rst.getShort(2) > 0 ? 1 : 0) + (rst.getShort(3) > 0 ? 1 : 0) + (rst.getShort(4) > 0 ? 1 : 0);
                String repeated = new String(new char[length * 3]).replace('\0', ' ')/*org.apache.commons.lang3.StringUtils.repeat(" ", length * 3)*/, ids;
                ids = repeated + (length == 0 ? rst.getShort(1) : "") + (length == 1 ? rst.getShort(2) : "") + (length == 2 ? rst.getShort(3) : "") + (length == 3 ? rst.getShort(4) : "");
                deftListModel.addElement(ids + ". " + rst.getString(6));
            }

        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        // TODO add your handling code here:
        int index = tblFunds.getSelectedRow();
        if (index < 0) return;

        ActiveRow = (short)index;
        CanEdit.get(index)[0] = FLAG.equals("OFFICES");
        CanEdit.get(index)[1] = true;

        pnlMain.setVisible(false);
        pnlSub.setVisible(true);
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRowActionPerformed
        // TODO add your handling code here:
        pnlMain.setVisible(false);
        pnlSub.setVisible(true);

        int index = Lista.getSelectedIndex();
        if (index < 0) {
            btnCancel.setText("Back");
            btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/back.png"))); // NOI18N
            javax.swing.JOptionPane.showMessageDialog(this, "Select item at left pane.", title, javax.swing.JOptionPane.WARNING_MESSAGE);
            return;
        }
        String sqlCommand; 
        javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
        NoRows = (short)modelo.getRowCount();
        
        switch (FLAG) {
            case "SERVICES":
                sqlCommand = "SELECT " +
                            "COUNT(*) + 1 " +
                        "FROM " +
                            "buds.fund_central " +
                        "WHERE " +
                            "(funds_id = " + aFunds.get(index) + ") AND " +
                            "(services > 0) AND " +
                            "(resp_id = 0)";
                break;
            case "SUB-OFFICES":
                sqlCommand = "SELECT " +
                            "COUNT(*) + 1 " +
                        "FROM " +
                            "buds.fund_central " +
                        "WHERE " +
                            "(funds_id = " + aFunds.get(index) + ") AND " +
                            "(services = " + aServices.get(index) + ") AND " +
                            "(resp_id = " + aOffices.get(index) + ") AND " +
                            "(resp_sub > 0) AND " +
                            "(programs = 0)";
                break;
            case "PROJECTS":
                sqlCommand = "SELECT " +
                            "COUNT(*) + 1 " +
                        "FROM " +
                            "buds.fund_central " +
                        "WHERE " +
                            "(funds_id = " + aFunds.get(index) + ") AND " +
                            "(services = " + aServices.get(index) + ") AND " +
                            "(resp_id = " + aOffices.get(index) + ") AND " +
                            "(resp_sub = " + aSubOffc.get(index) + ") AND " +
                            "(programs > 0)";
                break;
            default:
                sqlCommand = "";
        }
        btnCancel.setText("Cancel");
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/cancel.png"))); // NOI18N
        if (sqlCommand.isEmpty()) {
            /*OfficeDialog dialogo = new OfficeDialog();
            dialogo.setLocationRelativeTo(this);
            dialogo.setVisible(true);
            for (Object[] lista : dialogo.getData())
                modelo.addRow(lista);*/
            modelo.addRow(new Object[] {null, null, null});
            CanEdit.get(CanEdit.size() - 1)[0] = true;
            CanEdit.get(CanEdit.size() - 1)[1] = true;
            btnSave.setEnabled(Lista.getSelectedIndices().length > 0);
            
        } else
            try (java.sql.Connection jdbc = new budget.DBaseLink();
                    java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
                    java.sql.ResultSet rst = stmt.executeQuery(sqlCommand)) {
                if (rst.next()) index = rst.getShort(1);
                modelo.addRow(new Object[] {index, null, null});
                CanEdit.get(CanEdit.size() - 1)[1] = true;

            } catch (Exception ex) {
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
                java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } finally {
                
            }
        
    }//GEN-LAST:event_btnAddRowActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        if (btnCancel.getText().equals("Cancel")) {
            if (NoRows != null) {
                javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
                modelo.setRowCount(NoRows);
            }
        } else {
            btnCancel.setText("Cancel");
            btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/cancel.png"))); // NOI18N
        }

        if (ActiveRow != null & !CanEdit.isEmpty()) {
            CanEdit.get(ActiveRow)[0] = false;
            CanEdit.get(ActiveRow)[1] = false;
        }

        pnlSub.setVisible(false);
        pnlMain.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        KeyWord = javax.swing.JOptionPane.showInputDialog("What STRING to search? Type it below.", KeyWord);
        if (KeyWord == null) return;
        
        javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
        int mobo = modelo.getRowCount();
        for (short abc = SearchRow; abc < mobo; abc++) {
            String toSearch = modelo.getValueAt(abc, 1).toString();
            if (toSearch.contains(KeyWord)) {
                tblFunds.scrollRectToVisible(tblFunds.getCellRect(modelo.getRowCount() - 1, 0, true));
                tblFunds.setRowSelectionInterval(abc, abc);
                SearchRow = (short)(abc + 1);
                break;
            }
        }
        if (modelo.getRowCount() <= SearchRow) {
            SearchRow = 0; KeyWord = "";
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPreviewActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        int index = Lista.getSelectedIndex();
        if (index < 0) return;

        CanEdit.get(ActiveRow)[0] = false;
        CanEdit.get(ActiveRow)[1] = false;

        String sqlCmd1 = 
                "UPDATE " +
                    "buds.fund_control " +
                "SET " +
                    "years = ?, centre_uid = ?, funds_id = ?, services = ?, resp_id = ?, resp_sub = ?, programs = ?, description = ? " +
                "WHERE (centre_uid = ?)",
               sqlCmd2 = "INSERT INTO " +
                    "buds.fund_control (years, centre_uid, funds_id, services, resp_id, resp_sub, programs, description) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
        try (java.sql.Connection jdbc = new budget.DBaseLink();
                java.sql.PreparedStatement upmt = jdbc.prepareStatement(sqlCmd1);
                java.sql.PreparedStatement ipmt = jdbc.prepareStatement(sqlCmd2)) {
            
            if (tblFunds.isEditing()) tblFunds.getCellEditor().stopCellEditing();
            for (short abc = 0; abc < modelo.getRowCount(); abc++) {
                String value_uid, sector, office, suboffc, project;
                short value = Short.parseShort(modelo.getValueAt(abc, 0).toString());
                java.util.Calendar cals = java.util.Calendar.getInstance();
                cals.setTime(new java.text.SimpleDateFormat("yyyy-MM-dd").parse(System.getProperty("PETSAH"), new java.text.ParsePosition(0)));
                short tuig = (short)cals.get(java.util.Calendar.YEAR);
                switch (FLAG) {
                    case "SERVICES":
                        value_uid = String.valueOf(aFunds.get(index)) + "-" + new java.text.DecimalFormat("00").format(value);
                        if (Altered.get(abc)) // Dunay Record nadugang or nausab
                            if (modelo.getValueAt(abc, 2) == null) {// New Record
                                ipmt.setShort (1, tuig);
                                ipmt.setString(2, value_uid);
                                ipmt.setShort (3, aFunds.get(index));
                                ipmt.setShort (4, value);
                                ipmt.setShort (5, (short)0);
                                ipmt.setShort (6, (short)0);
                                ipmt.setShort (7, (short)0);
                                ipmt.setString(8, modelo.getValueAt(abc, 1).toString().toUpperCase());
                                ipmt.executeUpdate();
                            } else {
                                upmt.setString(1, value_uid);
                                upmt.setShort (2, aFunds.get(index));
                                upmt.setShort (3, value);
                                upmt.setShort (4, (short)0);
                                upmt.setShort (5, (short)0);
                                upmt.setShort (6, (short)0);
                                upmt.setString(7, modelo.getValueAt(abc, 1).toString().toUpperCase());
                                upmt.setString(8, modelo.getValueAt(abc, 2).toString());
                                upmt.executeUpdate();
                            }
                        break;
                    case "OFFICES":
                        sector = new java.text.DecimalFormat("00").format(aServices.get(index));
                        value_uid = String.valueOf(aFunds.get(index)) + "-" + sector + "-" + value;
                        if (Altered.get(abc))
                            if (modelo.getValueAt(abc, 2) == null) {
                                ipmt.setShort (1, tuig);
                                ipmt.setString(2, value_uid);
                                ipmt.setShort (3, aFunds.get(index));
                                ipmt.setShort (4, aServices.get(index));
                                ipmt.setShort (5, value);
                                ipmt.setShort (6, (short)0);
                                ipmt.setShort (7, (short)0);
                                ipmt.setString(8, modelo.getValueAt(abc, 1).toString().toUpperCase());
                                ipmt.executeUpdate();
                            } else {
                                upmt.setString(1, value_uid);
                                upmt.setShort (2, aFunds.get(index));
                                upmt.setShort (3, aServices.get(index));
                                upmt.setShort (4, value);
                                upmt.setShort (5, (short)0);
                                upmt.setShort (6, (short)0);
                                upmt.setString(7, modelo.getValueAt(abc, 1).toString().toUpperCase());
                                upmt.setString(8, modelo.getValueAt(abc, 2).toString());
                                upmt.executeUpdate();
                            }
                        break;
                    case "SUB-OFFICES":
                        sector  = new java.text.DecimalFormat("00").format(aServices.get(index));
                        office  = String.valueOf(aOffices.get(index));
                        suboffc = new java.text.DecimalFormat("00").format(value);
                        value_uid = aFunds.get(index) + "-" + sector + "-" + office + "-" + suboffc;
                        if (Altered.get(abc))
                            if (modelo.getValueAt(abc, 2) == null) {
                                ipmt.setShort (1, tuig);
                                ipmt.setString(2, value_uid);
                                ipmt.setShort (3, aFunds.get(index));
                                ipmt.setShort (4, aServices.get(index));
                                ipmt.setShort (5, aOffices.get(index));
                                ipmt.setShort (6, value);
                                ipmt.setShort (7, (short)0);
                                ipmt.setString(8, modelo.getValueAt(abc, 1).toString());
                                ipmt.executeUpdate();
                            } else {
                                upmt.setString(1, value_uid);
                                upmt.setShort (2, aFunds.get(index));
                                upmt.setShort (3, aServices.get(index));
                                upmt.setShort (4, aOffices.get(index));
                                upmt.setShort (5, value);
                                upmt.setShort (6, (short)0);
                                upmt.setString(7, modelo.getValueAt(abc, 1).toString());
                                upmt.setString(8, modelo.getValueAt(abc, 2).toString());
                                upmt.executeUpdate();
                            }
                        break;
                    case "PROJECTS":
                        sector  = new java.text.DecimalFormat("00").format(aServices.get(index));
                        office  = String.valueOf(aOffices.get(index));
                        suboffc = new java.text.DecimalFormat("00").format(aSubOffc.get(index));
                        project = new java.text.DecimalFormat("000").format(value);
                        value_uid = aFunds.get(index) + "-" + sector + "-" + office + "-" + suboffc + "-" + project;
                        if (Altered.get(abc))
                            if (modelo.getValueAt(abc, 2) == null) {
                                ipmt.setShort (1, tuig);
                                ipmt.setString(2, value_uid);
                                ipmt.setShort (3, aFunds.get(index));
                                ipmt.setShort (4, aServices.get(index));
                                ipmt.setShort (5, aOffices.get(index));
                                ipmt.setShort (6, aSubOffc.get(index));
                                ipmt.setShort (7, value);
                                ipmt.setString(8, modelo.getValueAt(abc, 1).toString());
                                ipmt.executeUpdate();
                            } else {
                                upmt.setString(1, value_uid);
                                upmt.setShort (2, aFunds.get(index));
                                upmt.setShort (3, aServices.get(index));
                                upmt.setShort (4, aOffices.get(index));
                                upmt.setShort (5, aSubOffc.get(index));
                                upmt.setShort (6, value);
                                upmt.setString(7, modelo.getValueAt(abc, 1).toString());
                                upmt.setString(8, modelo.getValueAt(abc, 2).toString());
                                upmt.executeUpdate();
                            }
                        break;
                }
            }
            javax.swing.JOptionPane.showMessageDialog(this, "Record save successfully.", title, javax.swing.JOptionPane.INFORMATION_MESSAGE);
            btnCancel.setText("Back");
            btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imahen/back.png"))); // NOI18N
            btnSave.setEnabled(false);
            
            NoRows = null;
            reLoad();
            ActiveRow = null;

            pnlSub.setVisible(false);
            pnlMain.setVisible(true);
            
            
            
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } finally {

        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        // TODO add your handling code here:
        doDefaultCloseAction();
    }//GEN-LAST:event_CloseActionPerformed

    private void btnEraseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraseActionPerformed
        // TODO add your handling code here:
        Object[] options = {"Yes", "No"};
        boolean checking = javax.swing.JOptionPane.showOptionDialog(
                this,
                "You are about to erase the selected item.\nDo you want to continue?",
                title,
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.WARNING_MESSAGE,
                null,
                options,
                options[options.length - 1]) == javax.swing.JOptionPane.NO_OPTION;
        if (checking) return;

        int index = tblFunds.getSelectedRow();
        index = tblFunds.convertRowIndexToModel(index);
        
        javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
        String id_code = modelo.getValueAt(index, 2).toString(),
                sqlCmd = 
                "SELECT " +
                    "fund_central.offices, " +
                    "fund_control.years " +
                "FROM " +
                    "buds.fund_central JOIN buds.fund_control " +
                    "ON fund_central.centre_uid SSS= fund_control.centre_uid " +
                "WHERE " +
                    "(fund_central.centre_uid = '" + id_code + "')";
        try (java.sql.Connection jdbc = new budget.DBaseLink();
                java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
                java.sql.PreparedStatement ptmt = jdbc.prepareStatement("DELETE FROM buds.fund_control WHERE (centre_uid = ?)");
                java.sql.PreparedStatement utmt = jdbc.prepareStatement("UPDATE buds.fund_control SET tagoonz = TRUE WHERE (centre_uid = ?)");
                java.sql.ResultSet rst = stmt.executeQuery(sqlCmd)) {
            if (rst.next()) {
                utmt.setString(1, id_code);
                utmt.executeUpdate();
            } else {
                ptmt.setString(1, id_code);
                ptmt.executeUpdate();
            }
            modelo.removeRow(index);
            reLoad();


        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } finally {

        }
    }//GEN-LAST:event_btnEraseActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame InternalFrame;
    private javax.swing.JList Lista;
    private javax.swing.JButton btnAddRow;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCloseA;
    private javax.swing.JButton btnCloseB;
    private javax.swing.JButton btnErase;
    private javax.swing.JButton btnModify;
    private javax.swing.JButton btnPreview;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.DefaultListModel deftListModel;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlSub;
    private javax.swing.JTable tblFunds;
    // End of variables declaration//GEN-END:variables

    private String FLAG, KeyWord;
    private Short  NoRows, SearchRow = 0, ActiveRow;
    
    private final javax.swing.event.ListDataListener listDataListener = new javax.swing.event.ListDataListener() {
        @Override
        public void intervalAdded(javax.swing.event.ListDataEvent lde) {
//            String sqlCommand = 
//                    "SELECT " +
//                        "funds_id, " +
//                        "services, " +
//                        "offices, " +
//                        "description " +
//                    "FROM " +
//                        "buds.fund_central " +
//                    "ORDER BY " +
//                        "funds_id, services, offices";
//            try (java.sql.Connection jdbc = new budget.DBaseLink();
//                    java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
//                    java.sql.ResultSet rst = stmt.executeQuery(sqlCommand)) {
//                while(rst.next()) {
//                    //aCenters.add(new Centres(rst.getShort(1), rst.getShort(2), rst.getString(3)));
//                    int length = (rst.getShort(2) > 0 ? 3 : 0) + (rst.getString(3).trim().isEmpty() ? 0 : 3);
//                    String repeated = org.apache.commons.lang3.StringUtils.repeat(" ", length);
//                    defaultListModel.addElement(repeated + (length == 0 ? rst.getShort(1) : (length == 3 ? rst.getShort(2) : rst.getString(3))) + ". " + rst.getString(4));
//                }
//
//
//            } catch (Exception ex) {
//                clazz.MsgBox.showError(FunctionForm.this, ex.getMessage(), title);
//                java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//            }
        }

        @Override
        public void intervalRemoved(javax.swing.event.ListDataEvent lde) {

        }

        @Override
        public void contentsChanged(javax.swing.event.ListDataEvent lde) {

        }
    };
    
    private void showSerbesyo(int index) {
        //System.out.println("Display Services");
        String sqlCommand = 
                "SELECT " +
                    "centre_uid, " +
                    "services, " +
                    "description " +
                "FROM " +
                    "buds.fund_control " +
                "WHERE " +
                    "(funds_id = " + aFunds.get(index) +") AND " +
                    "(services > 0) AND " +
                    "(resp_id = 0) " +
                "ORDER BY " +
                    "funds_id, services, resp_id";
        try (java.sql.Connection jdbc = new budget.DBaseLink();
                java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
                java.sql.ResultSet rst = stmt.executeQuery(sqlCommand)) {
            javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
            modelo.setRowCount(0); FLAG = "SERVICES"; CanEdit.clear(); Altered.clear();
            while(rst.next()) {
                Object[] rowData = {
                    rst.getShort(2),
                    rst.getString(3),
                    rst.getString(1)
                };
                modelo.addRow(rowData);
            }
            InternalFrame.setTitle(FLAG);


        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(FunctionForm.this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void showOpesina(int index) {
        //System.out.println("Display Offices");
        String sqlCommand = 
                "SELECT " +
                    "centre_uid, " +
                    "resp_id, " +
                    "description " +
                "FROM " +
                    "buds.fund_control " +
                "WHERE " +
                    "(funds_id = " + aFunds.get(index) +") AND " +
                    "(services = " + aServices.get(index) + ") AND " +
                    "(resp_id > 0) AND " +
                    "(resp_sub = 0) AND " +
                    "(programs = 0) " +
                "ORDER BY " +
                    "funds_id, services, resp_id";
        try (java.sql.Connection jdbc = new budget.DBaseLink();
                java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
                java.sql.ResultSet rst = stmt.executeQuery(sqlCommand)) {
            javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
            modelo.setRowCount(0); FLAG = "OFFICES"; CanEdit.clear(); Altered.clear();
            while(rst.next()) {
                Object[] rowData = {
                    rst.getString(2),
                    rst.getString(3),
                    rst.getString(1)
                };
                modelo.addRow(rowData);
            }
            InternalFrame.setTitle(FLAG);


        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(FunctionForm.this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private void showSubOffc(int index) {
        //System.out.println("Display Sub-Offices" + index);
        String sqlCommand = 
                "SELECT " +
                    "centre_uid, " +
                    "resp_sub, " +
                    "description " +
                "FROM " +
                    "buds.fund_control " +
                "WHERE " +
                    "(funds_id = " + aFunds.get(index) +") AND " +
                    "(services = " + aServices.get(index) + ") AND " +
                    "(resp_id = " + aOffices.get(index) + ") AND " +
                    "(resp_sub > 0) AND " +
                    "(programs = 0) " +
                "ORDER BY " +
                    "funds_id, services, resp_id, resp_sub";
        //boolean adunay = false;
        try (java.sql.Connection jdbc = new budget.DBaseLink();
                java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
                java.sql.ResultSet rst = stmt.executeQuery(sqlCommand)) {
            javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
            modelo.setRowCount(0); FLAG = "SUB-OFFICES"; CanEdit.clear(); Altered.clear();
            while(rst.next()) {
                Object[] rowData = {
                    rst.getString(2),
                    rst.getString(3),
                    rst.getString(1)
                };
                modelo.addRow(rowData);
                //adunay = true;
            }
            InternalFrame.setTitle(FLAG);


        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(FunctionForm.this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } finally {
            //return adunay;
        }
    }

    private void showProyekto(int index) {
        //System.out.println("Display Projects");
        String sqlCommand = 
                "SELECT " +
                    "centre_uid, " +
                    "programs, " +
                    "description " +
                "FROM " +
                    "buds.fund_control " +
                "WHERE " +
                    "(funds_id = " + aFunds.get(index) +") AND " +
                    "(services = " + aServices.get(index) + ") AND " +
                    "(resp_id = " + aOffices.get(index) + ") AND " +
                    "(resp_sub = " + aSubOffc.get(index) + ") AND " +
                    "(programs > 0) " +
                "ORDER BY " +
                    "funds_id, services, resp_id, resp_sub, programs";
        try (java.sql.Connection jdbc = new budget.DBaseLink();
                java.sql.Statement stmt = jdbc.createStatement(java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE, java.sql.ResultSet.CONCUR_READ_ONLY);
                java.sql.ResultSet rst = stmt.executeQuery(sqlCommand)) {
            javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel)tblFunds.getModel();
            modelo.setRowCount(0); FLAG = "PROJECTS"; CanEdit.clear(); Altered.clear();
            while(rst.next()) {
                Object[] rowData = {
                    rst.getShort(2),
                    rst.getString(3),
                    rst.getString(1)
                };
                modelo.addRow(rowData);
            }
            InternalFrame.setTitle(FLAG);


        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(FunctionForm.this, ex.getMessage(), title, javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(FunctionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    private class MyTableModelListener implements javax.swing.event.TableModelListener {
        @Override
        public void tableChanged(javax.swing.event.TableModelEvent tme) {
            switch (tme.getType()) {
                case javax.swing.event.TableModelEvent.INSERT:
                    //System.out.println("INSERT");
                    //System.out.println("Cell " + tme.getFirstRow() + ", " + tme.getColumn() + " changed. The new value: " );
                    CanEdit.add(new Boolean[]{false, false, false});
                    Altered.add(false);
                    break;

                case javax.swing.event.TableModelEvent.UPDATE:
                    //System.out.println("UPDATE");
                    ActiveRow = (short)tme.getFirstRow();
                    Altered.set(ActiveRow, true);
                    btnSave.setEnabled(true);
                    break;

                case javax.swing.event.TableModelEvent.DELETE:
                    //System.out.println("DELETE");
                    CanEdit.remove(tme.getFirstRow());
                    Altered.remove(tme.getFirstRow());
                    //System.out.println("Cell " + tme.getFirstRow() + ", " + tme.getColumn() + " changed. The new value: " );
                    btnSave.setEnabled(false);
                    break;
                    
                default:
                    System.out.println(tme.getType());
            }
        }
    }
}
