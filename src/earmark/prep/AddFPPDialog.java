package earmark.prep;

/**
 *
 * @author felix
 */
public class AddFPPDialog extends javax.swing.JDialog {

    private final java.util.ArrayList<String> arPPF = new java.util.ArrayList();
    
    /**
     * Creates new form NewEarMarkDialog
     * @param resp_id
     * @param classcode
     */
    public AddFPPDialog(String resp_id, String classcode) {
        super();
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        javax.swing.InputMap inputMap = getRootPane().getInputMap(javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0), cancelName);
        javax.swing.ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new javax.swing.AbstractAction() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                cancelButtonActionPerformed(ae);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent ae) {
                cancelButtonActionPerformed(null);
            }
        });
        RespCenter = resp_id;
        CLASS_CODE = classcode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        javax.swing.JButton cancelButton = new javax.swing.JButton();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        cboPPF = new organize.JComboDynamicWidth();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();

        setTitle("FPP Dialog");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        okButton.setText("Accept");
        okButton.setBorderPainted(false);
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setBorderPainted(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Program/Project/Function");

        cboPPF.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Account Title");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setForeground(java.awt.Color.blue);
        jLabel2.setText("Select Expense and Accept when done to decide on selected item.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 72, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboPPF, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboPPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        setSize(new java.awt.Dimension(685, 475));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        mPPF = new String[]{
            arPPF.get(cboPPF.getSelectedIndex()),
            cboPPF.getSelectedItem().toString()
        };

        int rowIndex = jttOffice.getSelectedRow();
        rowIndex = jttOffice.convertRowIndexToModel(rowIndex);
        earmark.Classification selectedNode = (earmark.Classification)jttOffice.getPathForRow(rowIndex).getLastPathComponent();
        earmark.ClassHeader clsHead = (earmark.ClassHeader)jttOffice.getTreeTableModel();
        if (clsHead.isLeaf(selectedNode)) {
            mNapiliNode = selectedNode;
            mChoice = true;
            setVisible(false);
        } else
            classes.MsgBox.showWarning(this, "Select Account only.", getTitle());
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        mChoice = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        String sqlCmd = 
                "SELECT " +
                    "centre_uid, " +
                    "description " +
                "FROM " +
                    "buds.fund_central " +
                "WHERE " +
                    "(centre_uid LIKE ?) AND (programs > 0) " +
                "ORDER BY " +
                    "centre_uid";
        try (budget.DBaseLink jdbc = new budget.DBaseLink()) {
/************* FPP *************/
            try (java.sql.PreparedStatement psmt = jdbc.prepareStatement(sqlCmd)) {
                psmt.setString(1, RespCenter + "%");
                try (java.sql.ResultSet rst = psmt.executeQuery()) {
                    while(rst.next()) {
                        arPPF.add(rst.getString(1));
                        cboPPF.addItem(rst.getString(2));
                    }
                }
            }

/************* ACCOUNT TITLE *************/
            sqlCmd = 
                "SELECT " +
                    "class_code, " +
                    "class_desc, " +
                    "filter_cmd " +
                "FROM " +
                    "buds.allot_class " +
                (CLASS_CODE.isEmpty() ? "" : "WHERE (class_code = " + CLASS_CODE + ") ") +
                "ORDER BY " +
                    "class_code";
            java.util.List<earmark.Classification> allotClass = new java.util.ArrayList();
            try (java.sql.PreparedStatement ptmt = jdbc.prepareStatement(sqlCmd);
                    java.sql.ResultSet rst = ptmt.executeQuery()) {
                while (rst.next()) {
                    sqlCmd = 
                        "SELECT " +
                            "coding, " +
                            "titles, " +
                            "allotment - earmark - obligate " +
                        "FROM " +
                            "buds.allotment_releases " +
                        "WHERE " +
                        rst.getString(3);
                    allotClass.add(new earmark.Classification(rst.getString(1), rst.getString(2), 0D, rst.getString(1), null));
                    java.util.List<earmark.Classification> charts = new java.util.ArrayList();
                    try (java.sql.PreparedStatement ppst = jdbc.prepareStatement(sqlCmd);
                            java.sql.ResultSet tbl = ppst.executeQuery()) {
                        while (tbl.next())
                            charts.add(new earmark.Classification(tbl.getString(1), tbl.getString(2), tbl.getDouble(3), rst.getString(1), null));
                    }
                    allotClass.get(allotClass.size() - 1).setChartList(charts);
                }
            }

            treeTableModel = new earmark.ClassHeader(allotClass);
            jttOffice = new org.jdesktop.swingx.JXTreeTable(treeTableModel);
            jttOffice.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            //jttOffice.setShowGrid(true, true);
            jttOffice.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
            if (jttOffice.getColumnModel().getColumnCount() > 0) {
//                jttOffice.getColumnExt(0).setPreferredWidth(150);
                jttOffice.getColumnModel().getColumn(0).setPreferredWidth(550);
                jttOffice.getColumnModel().getColumn(1).setPreferredWidth(110);
                jttOffice.getColumnModel().getColumn(1).setCellRenderer(new tables.LabelColumnRender(tables.LabelColumnRender.CENTER));
                jttOffice.getColumnModel().getColumn(2).setMinWidth(0);
                jttOffice.getColumnModel().getColumn(2).setPreferredWidth(0);
                jttOffice.getColumnModel().getColumn(2).setMaxWidth(0);
            }            
            jttOffice.setRootVisible(false);  // hide the root
            jttOffice.setEditable(false);

            jttOffice.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
                @Override
                public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                    if (evt.getValueIsAdjusting()) return;
                    okButton.setEnabled(jttOffice.getSelectedRow() >= 0);
                }
            });
            /*jttOffice.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jttOffice_mouseClicked(evt);
                }
            });
            jttOffice.addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent evt) {
                    jttOffice_keyPressed(evt);
                }
            });*/
            ScrollPane.setViewportView(jttOffice);
            
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), getTitle(), javax.swing.JOptionPane.ERROR_MESSAGE);
            java.util.logging.Logger.getLogger(AddFPPDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } finally {
            
        }
    }//GEN-LAST:event_formWindowOpened


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JComboBox cboPPF;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private final String RespCenter;
    private final String CLASS_CODE;
    
    private org.jdesktop.swingx.JXTreeTable jttOffice;
    private earmark.ClassHeader treeTableModel;
    
    
    private String[] mPPF;
    private Boolean  mChoice;
    private earmark.Classification mNapiliNode;

    public Boolean isChoice() {return mChoice;}
    public String[]  getPPF() {return mPPF;}
    public earmark.Classification  getNapiliNode() {return mNapiliNode;}
    
}
