/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package transaction.allotment;

import transaction.appropriation.*;
import classes.MsgBox;
import java.lang.reflect.Field;
import java.sql.Timestamp;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;

/**
 *
 * @author theamateurish
 */
public class FrmApprovalAllotment extends javax.swing.JInternalFrame {
    private String appPath = System.getProperties().getProperty("user.dir");
    private final boolean NUMERIC = true; 
    /**
     * Creates new form iFrmApproval
     */
    public FrmApprovalAllotment() {
        initComponents();
        loadAllotment();
    }
    
    private void loadAllotment(){
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        connect.DBConnection dbc = null;
        java.sql.PreparedStatement preparedStatement = null;
        String selectSQL="SELECT t1.fund_id,t1.legal_base,t1.control_id,t1.status,t1.date_prepared,"
                + "t2.description,t3.legal_desc,t3.legal_year FROM buds.allotment_status t1 "
                + "INNER JOIN temp.prep_respcenter t2 "
                + "ON t1.legal_base=t2.legal_base AND t1.fund_id=t2.funds_id "
                + "INNER JOIN buds.ordinances t3 ON t1.legal_base=t3.legal_uid "
                + "WHERE resp_id=0 "
                + "AND resp_sub=0 "
                + "AND programs=0 "
                + "AND classes=0 "
                + "AND t3.legal_year=? "
                + "AND t1.status='For Review' "
                + "ORDER BY t1.fund_id";               

        try {
                dbc = new connect.DBConnection();
                preparedStatement = dbc.prepareStatement(selectSQL);
                preparedStatement.setInt(1, Integer.valueOf(System.getProperty("systemYear")));
                java.sql.ResultSet rs = preparedStatement.executeQuery();
                classes.utils.clearTable(tblRecords);
                int R=0;
                while(rs.next()) {                                       
                    if (R >=tblRecords.getRowCount()){
                                    ((javax.swing.table.DefaultTableModel)tblRecords.getModel()).addRow(new Object[] {null, null, null, null, null});
                    } 
                    tblRecords.setValueAt(rs.getString("control_id"), R, 0);
                    tblRecords.setValueAt(new java.text.SimpleDateFormat("M/d/yyyy h:mm:ss a").format(rs.getTimestamp("date_prepared")), R, 1);
                    tblRecords.setValueAt(rs.getString("legal_desc"), R, 2);  
                    tblRecords.setValueAt(rs.getString("description"), R, 3);
                    tblRecords.setValueAt(rs.getString("status"), R, 4);
                    tblRecords.setValueAt(rs.getInt("legal_base"), R, 5);  
                    tblRecords.setValueAt(rs.getInt("fund_id"), R, 6);
                    R++;
                }

                preparedStatement.close();
                rs.close();                                          

        } catch (Exception e) {
                javax.swing.JOptionPane.showMessageDialog(this, e.getMessage(), "Select Records", javax.swing.JOptionPane.ERROR_MESSAGE);
                java.util.logging.Logger.getLogger("iFrmApprovalAllotment").log(java.util.logging.Level.SEVERE, null, e);
        } finally {
                if (dbc != null) try {
                    dbc.close();
                } catch (java.sql.SQLException ex) {
                    javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), "CLOSING CONNECTION", javax.swing.JOptionPane.ERROR_MESSAGE);
                    java.util.logging.Logger.getLogger("iFrmApprovalAllotment").log(java.util.logging.Level.SEVERE, null, ex);
                }
        }
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        panelList = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRecords = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        chDateAllotApproval = new datechooser.beans.DateChooserCombo();
        jLabel7 = new javax.swing.JLabel();
        tabPanePreview = new javax.swing.JTabbedPane();

        setClosable(true);
        setMaximizable(true);
        setTitle("ALLOTMENT-Approval");

        tblRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CONTROL#", "YEAR", "LEGAL BASIS", "FUND ACCOUNT", "STATUS", "LEGAL", "CTRLUID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRecords.getTableHeader().setReorderingAllowed(false);
        tblRecords.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRecordsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblRecords);
        tblRecords.getColumnModel().getColumn(0).setMinWidth(120);
        tblRecords.getColumnModel().getColumn(0).setPreferredWidth(120);
        tblRecords.getColumnModel().getColumn(0).setMaxWidth(120);
        tblRecords.getColumnModel().getColumn(4).setMinWidth(100);
        tblRecords.getColumnModel().getColumn(4).setPreferredWidth(100);
        tblRecords.getColumnModel().getColumn(4).setMaxWidth(100);
        tblRecords.getColumnModel().getColumn(5).setMinWidth(0);
        tblRecords.getColumnModel().getColumn(5).setPreferredWidth(0);
        tblRecords.getColumnModel().getColumn(5).setMaxWidth(0);
        tblRecords.getColumnModel().getColumn(6).setMinWidth(0);
        tblRecords.getColumnModel().getColumn(6).setPreferredWidth(0);
        tblRecords.getColumnModel().getColumn(6).setMaxWidth(0);

        btnApprove.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnApprove.setText("Approve");
        btnApprove.setEnabled(false);
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel7.setText("Date");

        javax.swing.GroupLayout panelListLayout = new javax.swing.GroupLayout(panelList);
        panelList.setLayout(panelListLayout);
        panelListLayout.setHorizontalGroup(
            panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(panelListLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(6, 6, 6)
                        .addComponent(chDateAllotApproval, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnApprove)))
                .addContainerGap())
        );
        panelListLayout.setVerticalGroup(
            panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(chDateAllotApproval, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnApprove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );

        splitPane.setLeftComponent(panelList);

        tabPanePreview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabPanePreviewMouseClicked(evt);
            }
        });
        splitPane.setRightComponent(tabPanePreview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblRecordsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRecordsMouseClicked
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        java.io.InputStream reportSource = null;
        String reportDest = "";
        String controlnum=tblRecords.getValueAt(tblRecords.getSelectedRow(), 0).toString();
        for(int i=0;i<=tabPanePreview.getTabCount()-1;i++)//To find current index of tab
        {
            if(controlnum.equals(tabPanePreview.getTitleAt(i))){
                tabPanePreview.removeTabAt(i);
            }
        } 
        try {
            reportSource = getClass().getResource("/budget/adviceAllotment.jasper").openStream();
            reportDest = appPath + "/results/adviceAllotment.html";

            java.io.File file = new java.io.File(appPath + "/results");
            if (!file.isDirectory()) file.mkdir();

            java.util.Map<String, Object> params = new java.util.HashMap<String, Object>();

            org.apache.log4j.Logger logger = org.apache.log4j.Logger.getRootLogger();
            logger.setLevel((org.apache.log4j.Level)org.apache.log4j.Level.WARN);

            // REPORT PARAMETERS
            java.awt.Image logo=new javax.swing.ImageIcon(getClass().getResource("/images/SC.jpg")).getImage();
            params.put("LogoSC",logo);
            params.put("ctrlid",tblRecords.getValueAt(tblRecords.getSelectedRow(), 0).toString());
            params.put("petsa",tblRecords.getValueAt(tblRecords.getSelectedRow(), 1).toString());
            params.put("legal",Integer.valueOf(tblRecords.getValueAt(tblRecords.getSelectedRow(), 5).toString()));
            params.put("fund",Integer.valueOf(tblRecords.getValueAt(tblRecords.getSelectedRow(), 6).toString()));
            params.put("fund_desc",tblRecords.getValueAt(tblRecords.getSelectedRow(),3).toString());
            params.put("legal_desc",tblRecords.getValueAt(tblRecords.getSelectedRow(),2).toString());

            net.sf.jasperreports.engine.JasperPrint jasperPrint = net.sf.jasperreports.engine.JasperFillManager.fillReport(reportSource, params, new connect.DBConnection().getLink());
            net.sf.jasperreports.engine.JasperExportManager.exportReportToHtmlFile(jasperPrint, reportDest);
            net.sf.jasperreports.view.JRViewer jrv=new net.sf.jasperreports.view.JRViewer(jasperPrint);
            try {
            // find button
            Field s = jrv.getClass().getDeclaredField("btnSave");
            Field p = jrv.getClass().getDeclaredField("btnPrint");
            s.setAccessible(true);
            p.setAccessible(true);
            JButton saveButton = (JButton) s.get(jrv);
            JButton printButton = (JButton) p.get(jrv);
            saveButton.setVisible(false); // or setEnabled(false);
//            printButton.setVisible(false);
            } catch (Exception e) {
            // silent
            }
            
            tabPanePreview.addTab(controlnum,jrv); 
            int index = tabPanePreview.indexOfTab(controlnum);            
            tabPanePreview.setTabComponentAt(index,createTabHead(controlnum));  
            tabPanePreview.setSelectedComponent(jrv);
            tabPanePreview.setVisible(true);  
            new connect.DBConnection().close();
            btnApprove.setEnabled(!tblRecords.getValueAt(tblRecords.getSelectedRow(),4).toString().equals("Approved"));
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger("iFrmApprovalAllotment").log(java.util.logging.Level.SEVERE, null, ex);
        }
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        
    }//GEN-LAST:event_tblRecordsMouseClicked

    private void tabPanePreviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPanePreviewMouseClicked
        String tabtitle=String.valueOf(tabPanePreview.getTitleAt(tabPanePreview.getSelectedIndex()));
        for(int i=0;i<tblRecords.getRowCount();i++) {
            if(String.valueOf(tblRecords.getValueAt(i, 0)).equals(tabtitle)){
                tblRecords.setRowSelectionInterval(i, i);
                break;
            }    
        }
        btnApprove.setEnabled(!tblRecords.getValueAt(tblRecords.getSelectedRow(),4).toString().equals("Approved"));
    }//GEN-LAST:event_tabPanePreviewMouseClicked

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        int resp=classes.MsgBox.showConfirm(this,"Once you approve, modification is not possible anymore. Do you want to continue? ", getTitle());
        if(resp==javax.swing.JOptionPane.YES_OPTION){
            connect.DBConnection dbc = null;
            int success=0;
            try {
                dbc = new connect.DBConnection();
                dbc.setAutoCommit(false);
                dbase.SQLExecute updateFundControl = new dbase.SQLExecute("buds.allotment_status");
                updateFundControl.FieldName("control_id",  !NUMERIC, enums.Take.ConditionOnly, tblRecords.getValueAt(tblRecords.getSelectedRow(), 0).toString());
                updateFundControl.FieldName("status",  !NUMERIC, enums.Take.UpdateOnly, "Approved");
                updateFundControl.FieldName("date_prepared",  !NUMERIC, enums.Take.UpdateOnly, new connect.SystemOptions().ServerDate());
                success=dbc.executeUpdate(updateFundControl.Perform(enums.Fire.doUpdate));            

                if(success>0){
                    dbc.commit();
                    dbc.close();
                    classes.MsgBox.showInfo(this, "Approved successfully!", getTitle());  
                    loadAllotment();
                    btnApprove.setEnabled(false);
                }

            } catch (Exception ex) {
                if (dbc != null) try {
                    dbc.rollback();
                } catch (Exception rlbk) {
                    java.util.logging.Logger.getLogger("iFrmApprovalAllotment").log(java.util.logging.Level.SEVERE, null, rlbk);
                }
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                java.util.logging.Logger.getLogger("iFrmApprovalAllotment").log(java.util.logging.Level.SEVERE, null, ex);

            } finally {
                if (dbc != null) try {
                    dbc.close();
                } catch (Exception ex) {
                    java.util.logging.Logger.getLogger("iFrmApprovalAllotment").log(java.util.logging.Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private datechooser.beans.DateChooserCombo chDateAllotApproval;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel panelList;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTabbedPane tabPanePreview;
    private javax.swing.JTable tblRecords;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JPanel createTabHead(String title)
    {
        final String st=title;
        javax.swing.JPanel pnlTab = new javax.swing.JPanel();
        pnlTab.setLayout(new javax.swing.BoxLayout(pnlTab,javax.swing.BoxLayout.LINE_AXIS));
        pnlTab.setOpaque(false);
        javax.swing.JButton btnClose = new javax.swing.JButton("x");
        javax.swing.JLabel lblTitle = new javax.swing.JLabel(title+"    ");
        lblTitle.setFont(new java.awt.Font("Dialog", 0, 12));
        btnClose.setFont(new java.awt.Font("Dialog", 0, 12));
        btnClose.setBorderPainted(false);
        btnClose.setOpaque(false);
        
        btnClose.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent e) {                    
                    int i; 
                    for(i=0;i<=tabPanePreview.getTabCount()-1;i++)//To find current index of tab
                    {
                    if(st.equals(tabPanePreview.getTitleAt(i)))
                            break;
                    }                   
                   tabPanePreview.removeTabAt(i);
                   if(tabPanePreview.getTabCount()==0){
                       tblRecords.clearSelection();
                       btnApprove.setEnabled(false);
                   }
                   String tabtitle=String.valueOf(tabPanePreview.getTitleAt(tabPanePreview.getSelectedIndex()));
                   for(int j=0;j<tblRecords.getRowCount();j++) {
                       if(String.valueOf(tblRecords.getValueAt(j, 0)).equals(tabtitle)){
                           tblRecords.setRowSelectionInterval(j, j);
                           break;
                       }    
                   }
                   btnApprove.setEnabled(!tblRecords.getValueAt(tblRecords.getSelectedRow(),4).toString().equals("Approved"));
                   
            }             
        });
        
        pnlTab.add(lblTitle);
        pnlTab.add(btnClose); 
        return pnlTab;
    }
}
