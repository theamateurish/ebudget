/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package transaction.appropriation;

import java.util.ArrayList;

/**
 *
 * @author theamateurish
 */
public class DlgListExpenditure extends javax.swing.JDialog {

    private javax.swing.DefaultListModel listmodelExp=new javax.swing.DefaultListModel();
    private java.util.ArrayList <String>arrObjExp=new java.util.ArrayList<String>();
    private java.util.ArrayList <String>arrObjExpDesc=new java.util.ArrayList<String>();
    /**
     * Creates new form DlgListExpenditure
     */
    public DlgListExpenditure(java.awt.Frame parent, boolean modal,String code) {
        super(parent, modal);
        initComponents();
        loadObjExp(code);
        clearSelectedExp();
    }

    private void loadObjExp(String classcode){
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));   
        connect.DBConnection dbc = null;
        java.sql.PreparedStatement preparedStatement = null;
        java.sql.PreparedStatement preparedStatement1 = null;
        listmodelExp.clear();
        arrObjExp.clear();
        try{         
            dbc = new connect.DBConnection();
            preparedStatement = dbc.prepareStatement("SELECT filter_cmd FROM buds.allot_class WHERE class_code=" + Integer.valueOf(classcode));
            java.sql.ResultSet rs = preparedStatement.executeQuery();
            if(rs.next()){
                preparedStatement1=dbc.prepareStatement("SELECT * FROM acct.accounts WHERE " + rs.getString(1) + " ORDER BY coding");
                java.sql.ResultSet rs1=preparedStatement1.executeQuery();
                while (rs1.next()) {
                    arrObjExp.add(rs1.getString("coding"));
                    listmodelExp.addElement(new utility.CheckBoxItm( rs1.getString("titles")));
                }
                preparedStatement1.close();
                rs1.close();  
            }                      

            preparedStatement.close();
            rs.close(); 
        }catch (Exception ex) {
//            MsgBox.showInfo(this.getContentPane(), ex.getMessage(), title);
           java.util.logging.Logger.getLogger(DlgListExpenditure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }finally{
            if(dbc!=null){
                try {
                    dbc.close();
                } catch (java.sql.SQLException ex) {
                    classes.MsgBox.showError(this.getContentPane(), ex.getMessage(), getTitle());
                    java.util.logging.Logger.getLogger(DlgListExpenditure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            }
        }
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    } 
    
    
    private void getSelectedExp(){
        for(int list=0;list<listExpndture.getModel().getSize();list++){
            utility.CheckBoxItm Citem = (utility.CheckBoxItm) listExpndture.getModel().getElementAt(list);
            if(Citem.isSelected()){
                arrObjExpDesc.add(String.valueOf(arrObjExp.get(list))+"~/~"+ Citem);
            }
        }        
    }
    
    private void clearSelectedExp(){
        for(int list=0;list<listExpndture.getModel().getSize();list++){
            utility.CheckBoxItm Citem = (utility.CheckBoxItm) listExpndture.getModel().getElementAt(list);
            if(Citem.isSelected()){
                Citem.setSelected(false);
            }            
        }
        listExpndture.repaint();
    }
    
    private void selectAllExp(){
        for(int list=0;list<listExpndture.getModel().getSize();list++){
            utility.CheckBoxItm Citem = (utility.CheckBoxItm) listExpndture.getModel().getElementAt(list);
            if(!Citem.isSelected()){
                Citem.setSelected(true);
            }            
        }
        listExpndture.repaint();
    }
   
    
    private int getIndex(String itemName)
    {
        for (int i = 0; i < listmodelExp.size(); i++)
        {
            String auction = listmodelExp.getElementAt(i).toString();
            if (itemName.equals(auction))
            {
                return i;
            }
        } 

        return -1;
    }

    public ArrayList<String> getArrObjExpDesc() {
        return arrObjExpDesc;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listExpndture = new javax.swing.JList(listmodelExp);
        btnOK = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        listExpndture.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        listExpndture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listExpndtureMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listExpndture);
        listExpndture.setCellRenderer(new utility.CheckListRenderer());

        btnOK.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnClear.setText("Clear All");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSelect.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        btnSelect.setText("Select All");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addComponent(btnSelect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOK)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(473, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnClear)
                    .addComponent(btnSelect))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(44, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listExpndtureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listExpndtureMouseClicked
        // TODO add your handling code here:
        int index = listExpndture.getSelectedIndex();
        utility.CheckBoxItm Citem = (utility.CheckBoxItm) listExpndture.getModel().getElementAt(index);
        Citem.setSelected(!Citem.isSelected());
        listExpndture.repaint(listExpndture.getCellBounds(index, index));
    }//GEN-LAST:event_listExpndtureMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearSelectedExp();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        selectAllExp();
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        getSelectedExp();
        dispose();
    }//GEN-LAST:event_btnOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listExpndture;
    // End of variables declaration//GEN-END:variables
}
